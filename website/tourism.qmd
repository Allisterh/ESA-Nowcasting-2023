---
title: Number of nights spent at tourist accommodation establishments challenge
---

Accommodation statistics are a key part of the system of tourism statistics in the EU and have a long history of data collection.
For this indicator, the benchmark will be the official figures on nights spent at tourist accommodation establishments by residents and non-residents.

A night spent is each night a guest/tourist (resident or non-resident) actually spends (sleeps or stays) or is registered (his/her physical presence there being unnecessary) in a tourist accommodation establishment.

## Forecast for a given country, with modular history

```{r}
#| cache: false

data <- targets::tar_read(data, store = "store_data")
targets::tar_load(predictions_tourism, store = "store_tourism")

sample <- data$TOURISM$data |>
  dplyr::filter((nace_r2 %in% "I551-I553"))

ojs_define(data = sample, pred = predictions_tourism)
```

```{ojs}
sample = format_historical_data(data, ctr_iso)
```

```{ojs}
preds = format_pred_data(pred, ctr_iso)
```


```{ojs}
viewof country = Inputs.select(ctry_challenge, {label: "Select a country:"})
```


```{ojs}
addTooltips(
Plot.plot({
  grid: true,
  y: {
    label: "Number of nights spent at tourist accommodation establishments",
  },  
  x: {
      label: "Year",
      domain: range
    },
  marks: [
    Plot.line(sample, {
        x: "date", 
        y: "values", 
        stroke: "black",
        title: (d) =>
              `${d.date.toLocaleString("en-UK", {
                month: "long",
                year: "numeric"
              })}\n ${d.values} `
        }),
    Plot.dot(preds, {
        x: "date", 
        y: "values",
        fill: "model",
        title: (d) =>
              `${d.date.toLocaleString("en-UK", {
                month: "long",
                year: "numeric"
              })}\n ${d.values} `
        })
  ],
  color: {legend: true}
})
)
```

```{ojs}
dates = {
  const data = sample.map(d => d.date)
  data.push(preds.map(d => d.date)[0])
  return data  
}

viewof range = offsetInterval(dates, {
  value: [ dates[dates.length-90], dates[dates.length-1] ],
  format: ([a, b]) => htl.html`<span ${{
    style: "display: flex; justify-content: space-between"
  }}>
    ${a.toISOString("en-UK").slice(0, 10)}
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
    ${b.toISOString("en-UK").slice(0, 10)}
  </span>`
})
```


<!-- HELPERS -->


```{ojs}
ctry_challenge = unique(transpose(pred).map(d => map_country_name[d.geo])).filter(value => value !== undefined)
```

```{ojs}
ctr_iso = Object.keys(map_country_name).find(key => map_country_name[key] === country);
```


<!-- DEPENDENCIES -->

```{ojs}
import { 
    map_country_name,
    unique,
    format_historical_data,
    format_pred_data,
     } from "./utils/utils.qmd"

```

```{ojs}
import {addTooltips} from "@mkfreeman/plot-tooltip"
import {offsetInterval} from '@mootari/offset-slider'
```
