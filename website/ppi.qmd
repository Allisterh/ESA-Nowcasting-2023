---
title: Producer prices in industry challenge
---

Un petit topo sur le PPI


```{r}
#| cache: false

data <- targets::tar_read(data, store = "store_data")

sample <- data$PPI$data |>
  dplyr::filter((nace_r2 %in% "B-E36"))

ojs_define(data = sample)
```


```{ojs}
viewof country = Inputs.select(unique(data_typed.map(d => d.geo)), {label: "Select a country"})
```


```{ojs}
addTooltips(
Plot.plot({
  grid: true,
  y: {
    label: "Producer prices in industry",
  },  
  x: {
      label: "Year",
      domain: range
    },
  marks: [
    Plot.line(sample, {
    x: "date", 
    y: "values", 
    stroke: "black",
    title: (d) =>
          `${d.date.toLocaleString("en-UK", {
            month: "long",
            year: "numeric"
          })}\n ${d.values} `,
    xDomain: range
    })
  ]
})
)
```

```{ojs}
dates = sample.map(d => d.date)
viewof range = offsetInterval(dates, {
  value: [ dates[[dates.length-90]], dates[dates.length-1] ],
  format: ([a, b]) => htl.html`<span ${{
    style: "display: flex; justify-content: space-between"
  }}>
    <span>${a.toISOString("en-UK").slice(0, 10)}</span>
    <span>${b.toISOString("en-UK").slice(0, 10)}</span>
  </span>`
})
```

```{ojs}
Inputs.table(sample)
```


<!-- HELPERS -->

```{ojs}
data_t = transpose(data)
data_typed = data_t.map( d => (
    {
      date: dateParser(d.time),
      values: d.values,
      geo: d.geo
    } 
   )
 )

sample = data_typed.filter(d => d.geo == country)
```

```{ojs}
<!-- dateParser = d3.timeParse("%Y-%m-%d") -->

dateParser = (dateString) => {
  const [year, month, day] = dateString.split('-')
  const date = new Date(Date.UTC(year, month - 1, day, 0, 0, 0))
  const timezoneOffset = date.getTimezoneOffset()
  date.setMinutes(date.getMinutes() - timezoneOffset)
  return date
}
```

```{ojs}
function unique(data, accessor) {
return Array.from(new Set(accessor ? data.map(accessor) : data));
	}
```

<!-- DEPENDENCIES -->

```{ojs}
import {addTooltips} from "@mkfreeman/plot-tooltip"
import {offsetInterval} from '@mootari/offset-slider'
```
